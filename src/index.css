@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

/* 
main bgcolor: bg-slate-500 hover:bg-slate-600 text-white

disable: disabled:bg-gray-400 disabled:cursor-not-allowed

border-color 
border-stone-300 dark:border-slate-700
dark:bg-slate-700/50

MainText : text-slate-900 dark:text-white
subText : text-slate-500 dark:text-slate-400

icons color : text-slate-600 dark:text-slate-300
icon surround : bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-600 dark:to-slate-700

ligh background : bg-slate-50 dark:bg-slate-700/50

Button : bg-slate-500 text-white hover:bg-slate-600 **text-slate-800** focus:ring-slate-300

hover on navigation button: hover:bg-slate-200 dark:hover:bg-slate-700
text and icons colors : text-slate-900 dark:text-slate-300

px-6 py-4

animate-spin for spinning
import { LuLoader } from "react-icons/lu";
 */

@theme {
  /* default */
  --font-sans: "Quicksand", sans-serif;

  --breakpoint-smallest: 300px;
  --breakpoint-sm: 325px;
  --breakpoint-medium: 650px;
  --breakpoint-md: 768px;
  --breakpoint-middle: 850px;
  --breakpoint-maxmid: 900px;
  --breakpoint-lg: 1024px;

  /*
  --breakpoint-sm: 40rem;
  --breakpoint-md: 48rem;
  --breakpoint-lg: 64rem;
  --breakpoint-xl: 80rem;
  --breakpoint-2xl: 96rem;
  */
}

@layer components {
  /* General */
  .transitioning {
    @apply transform transition-transform duration-300 ease-in-out;
  }

  .transitioningColors {
    @apply transition-colors duration-300;
  }

  .defaultColor {
    @apply bg-white transition-colors duration-300 dark:bg-slate-900;
  }

  /* medium:py-2 */
  .input {
    @apply rounded-sm border border-stone-300 px-1.5 py-1.5 text-sm text-black transition-all duration-300 placeholder:text-xs hover:border-slate-400 focus:ring-2 focus:ring-slate-400 focus:outline-hidden;
  }

  .button {
    @apply medium:text-[0.74rem] cursor-pointer rounded-sm border text-[0.7rem] whitespace-nowrap transition-colors duration-300;
  }

  /* I will be changing the primary button */
  .primaryButton {
    @apply cursor-pointer rounded-sm bg-slate-500 px-4 py-2 text-[0.8rem] whitespace-nowrap text-white transition-colors duration-300 hover:bg-slate-600 focus:ring-slate-300;
  }

  .navButton {
    @apply medium:justify-center mb-2 flex w-full cursor-pointer items-center gap-2.5 rounded-sm px-2 py-1.5 text-center text-sm font-semibold transition-colors duration-500 hover:rounded-sm;
  }

  .scroll-container {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .scroll-container::-webkit-scrollbar {
    display: none;
  }

  /* Style the editable area */
  .ProseMirror {
    min-height: 30rem;
    width: 100%;
    border: none;
    outline: none;
    background-color: transparent;
  }

  .ProseMirror:focus {
    outline: none;
  }

  .ProseMirror h1 {
    font-size: 1.1rem;
    font-weight: bold;
    margin: 0.5em 0;
  }

  .ProseMirror h2 {
    font-size: 0.875rem;
    font-weight: bold;
    margin: 0.5em 0;
  }

  .progress {
    width: 100%;
    height: 3px;
    background: linear-gradient(#000 0 0) 0/0% no-repeat #ddd;
    animation: l1 2s infinite linear;
  }

  @keyframes l1 {
    100% {
      background-size: 100%;
    }
  }

  .spinner {
    aspect-ratio: 1;
    border-radius: 50%;
    /* background: #555;  */
    --_m:
      conic-gradient(#0000 10%, #000), linear-gradient(#000 0 0) content-box;
    -webkit-mask: var(--_m);
    mask: var(--_m);
    -webkit-mask-composite: source-out;
    mask-composite: subtract;
    animation: l3 1s infinite linear;
  }

  @keyframes l3 {
    to {
      transform: rotate(1turn);
    }
  }
}

/* .toolbar-btn {
  padding: 6px 12px;
  border: 1px solid #ccc;
  background: #fff;
  cursor: pointer;
}

.toolbar-btn.is-active {
  background: #333;
  color: #fff;
  border-color: #333;
}

.toolbar-btn.not-active {
  background: #fff;
  color: #000;
} */

/*
Will use this in the flashcard section to switch between normal created card or ai generated

className="rounded-sm border border-slate-200 bg-white p-1 shadow-sm dark:border-slate-700 dark:bg-slate-800"
*/

/* ===== CHAT LAYOUT STYLES ===== */

/* Message Wrapper - Container for individual messages */
.message-wrapper {
  @apply mb-4 flex;
}

.user-message {
  @apply justify-end;
}

.ai-message {
  @apply justify-start;
}

/* Message Bubble - Individual message styling */
.message-bubble {
  @apply max-w-[70%] rounded-lg p-3 shadow-sm;
}

.user-bubble {
  @apply rounded-br-none bg-blue-500 text-white;
}

.ai-bubble {
  @apply rounded-bl-none bg-slate-100 text-slate-900 dark:bg-slate-700 dark:text-white;
}

/* Message Header - Sender info and icon */
.message-header {
  @apply mb-1 flex items-center;
}

.message-icon {
  @apply mr-2 h-4 w-4;
}

.ai-icon {
  @apply text-blue-600 dark:text-blue-400;
}

.user-icon {
  @apply text-white;
}

.message-sender {
  @apply text-sm font-semibold;
}

/* Message Text - Actual message content */
.message-text {
  @apply text-sm;
}

/* Typing Indicator - Shows when AI is typing */
.typing-indicator {
  @apply animate-pulse text-sm;
}

/* Chat Input Form - Message input area */
.chat-input-form {
  @apply mt-6 flex items-center space-x-4;
}

/* Chat Input - Textarea for typing messages */
.chat-input {
  @apply h-12 flex-1 resize-none overflow-hidden rounded-xl border border-slate-300 bg-slate-50 p-3 text-slate-900 focus:ring-2 focus:ring-blue-500 focus:outline-none dark:border-slate-600 dark:bg-slate-700 dark:text-white;
}

/* Chat Send Button - Send message button */
.chat-send-button {
  @apply rounded-xl bg-blue-600 p-3 text-white transition-colors hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50;
}

.send-icon {
  @apply h-5 w-5;
}

/* Chat Scrollbar - Custom scrollbar styling */
.chat-scrollbar::-webkit-scrollbar {
  width: 8px;
}

.chat-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}

.chat-scrollbar::-webkit-scrollbar-thumb {
  background-color: rgba(148, 163, 184, 0.5); /* slate-400 with opacity */
  border-radius: 4px;
}

.chat-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: rgba(148, 163, 184, 0.7);
}

.dark .chat-scrollbar::-webkit-scrollbar-thumb {
  background-color: rgba(71, 85, 105, 0.5); /* slate-600 with opacity */
}

.dark .chat-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: rgba(71, 85, 105, 0.7);
}

/* 
Componenets for flashcard
1.CreateFlashcard *** Layout
** Header
** Form
** Form
** FormButtons


***************************** NOTE ********************
<div className="flex gap-2 mb-2">
  <button onClick={() => document.execCommand("bold")}><b>B</b></button>
  <button onClick={() => document.execCommand("italic")}><i>I</i></button>
  <button onClick={() => document.execCommand("underline")}><u>U</u></button>
</div>

import { useState, useEffect, useRef } from "react";

function NoteEditor({ initialNote, disabled = false }) {
  const [title, setTitle] = useState(initialNote?.title || "");
  const [content, setContent] = useState(initialNote?.content || "");
  const [textSize, setTextSize] = useState("text-base");
  const textareaRef = useRef(null);

  const onTitleChange = (e) => setTitle(e.target.value);
  const onContentChange = (e) => setContent(e.target.value);
  const handleTextSelection = () => {
    // Optional: Get selected text here
  };

  const handleKeyboardShortcut = (e) => {
    if (e.ctrlKey || e.metaKey) {
      switch (e.key.toLowerCase()) {
        case "b":
          e.preventDefault();
          document.execCommand("bold");
          break;
        case "i":
          e.preventDefault();
          document.execCommand("italic");
          break;
        case "u":
          e.preventDefault();
          document.execCommand("underline");
          break;
        default:
          break;
      }
    }
  };

  useEffect(() => {
    // If needed, sync title/content to parent or database
  }, [title, content]);

  return (
    <div className="flex flex-col h-full w-full">
      <input
        type="text"
        id="note-title"
        name="title"
        placeholder="Title"
        value={title}
        onChange={onTitleChange}
        className="w-full border-b border-stone-300 dark:border-slate-700 bg-transparent pb-2 text-xl font-bold text-slate-900 placeholder:text-gray-400 focus:outline-none medium:text-2xl dark:text-white dark:placeholder:text-gray-500"
        disabled={disabled}
      />

      <div className="mt-4 h-full flex-grow">
        <textarea
          ref={textareaRef}
          id="note-content"
          name="content"
          placeholder={`Start writing your note here...

Select text and use the formatting buttons above to apply:
• Bold formatting (Ctrl+B)
• Italic formatting (Ctrl+I)  
• Underline formatting (Ctrl+U)
• Heading styles (Ctrl+Shift+1/2)

Or use the buttons in the toolbar above.`}
          value={content}
          onChange={onContentChange}
          onSelect={handleTextSelection}
          onMouseUp={handleTextSelection}
          onKeyUp={handleTextSelection}
          onKeyDown={handleKeyboardShortcut}
          className={`scroll-container h-full w-full resize-none bg-transparent text-gray-900 placeholder:text-gray-500 focus:outline-none md:text-base dark:text-white dark:placeholder:text-gray-400 ${textSize}`}
          disabled={disabled}
          style={{
            lineHeight: "1.6",
          }}
        />
      </div>
    </div>
  );
}

export default NoteEditor;



 */

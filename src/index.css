@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

/* 
border-color 
border-stone-300 dark:border-slate-700
dark:bg-slate-700/50

MainText : text-slate-900 dark:text-white
subText : text-slate-500 dark:text-slate-400

icons color : text-slate-600 dark:text-slate-300
icon surround : bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-600 dark:to-slate-700

ligh background : bg-slate-50 dark:bg-slate-700/50

Button : bg-slate-500 text-white hover:bg-slate-600 focus:ring-slate-300

hover on navigation button: hover:bg-slate-200 dark:hover:bg-slate-700
text and icons colors : text-slate-900 dark:text-slate-300

px-6 py-4
 */

@theme {
  /* default */
  --font-sans: "Quicksand", sans-serif;

  --breakpoint-smallest: 300px;
  --breakpoint-sm: 325px;
  --breakpoint-medium: 650px;
  --breakpoint-md: 768px;
  --breakpoint-middle: 850px;
  --breakpoint-maxmid: 900px;
  --breakpoint-lg: 1024px;

  /*
  --breakpoint-sm: 40rem;
  --breakpoint-md: 48rem;
  --breakpoint-lg: 64rem;
  --breakpoint-xl: 80rem;
  --breakpoint-2xl: 96rem;
  */
}

@layer components {
  /* General */
  .transitioning {
    @apply transform transition-transform duration-300 ease-in-out;
  }

  .transitioningColors {
    @apply transition-colors duration-300;
  }

  .defaultColor {
    @apply bg-white transition-colors duration-300 dark:bg-slate-900;
  }

  /* medium:py-2 */
  .input {
    @apply rounded-sm border border-stone-300 px-1.5 py-1.5 text-sm text-black transition-all duration-300 placeholder:text-xs hover:border-stone-500 focus:ring-2 focus:ring-stone-400 focus:outline-hidden;
  }

  .button {
    @apply medium:text-[0.74rem] cursor-pointer rounded-sm border text-[0.7rem] transition-colors duration-300;
  }

  .navButton {
    @apply medium:justify-center mb-2 flex w-full cursor-pointer items-center gap-2.5 rounded-sm px-2 py-1.5 text-center text-sm font-semibold transition-colors duration-500 hover:rounded-sm;
  }

  .progress {
    width: 100%;
    height: 3px;
    background: linear-gradient(#000 0 0) 0/0% no-repeat #ddd;
    animation: l1 2s infinite linear;
  }

  @keyframes l1 {
    100% {
      background-size: 100%;
    }
  }

  .spinner {
    aspect-ratio: 1;
    border-radius: 50%;
    /* background: #555;  */
    --_m:
      conic-gradient(#0000 10%, #000), linear-gradient(#000 0 0) content-box;
    -webkit-mask: var(--_m);
    mask: var(--_m);
    -webkit-mask-composite: source-out;
    mask-composite: subtract;
    animation: l3 1s infinite linear;
  }

  @keyframes l3 {
    to {
      transform: rotate(1turn);
    }
  }
}

/*
"use client"

import * as motion from "motion/react-client"
import { useState } from "react"

export default function LayoutAnimation() {
    const [isOn, setIsOn] = useState(false)

    const toggleSwitch = () => setIsOn(!isOn)

    return (
        <button
            className="toggle-container"
            style={{
                ...container,
                justifyContent: "flex-" + (isOn ? "start" : "end"),
            }}
            onClick={toggleSwitch}
        >
            <motion.div
                className="toggle-handle"
                style={handle}
                layout
                transition={{
                    type: "spring",
                    visualDuration: 0.2,
                    bounce: 0.2,
                }}
            />
        </button>
    )
}



const container = {
    width: 100,
    height: 50,
    backgroundColor: "var(--hue-3-transparent)",
    borderRadius: 50,
    cursor: "pointer",
    display: "flex",
    padding: 10,
}

const handle = {
    width: 50,
    height: 50,
    backgroundColor: "#9911ff",
    borderRadius: "50%",
}
*/

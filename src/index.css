@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

/* 
main bgcolor: bg-slate-500 hover:bg-slate-600 text-white

disable: disabled:bg-gray-400 disabled:cursor-not-allowed

border-color 
border-stone-300 dark:border-slate-700
dark:bg-slate-700/50

MainText : text-slate-900 dark:text-white
subText : text-slate-500 dark:text-slate-400

icons color : text-slate-600 dark:text-slate-300
icon surround : bg-gradient-to-r from-slate-200 to-slate-300 dark:from-slate-600 dark:to-slate-700

ligh background : bg-slate-50 dark:bg-slate-700/50

Button : bg-slate-500 text-white hover:bg-slate-600 **text-slate-800** focus:ring-slate-300

hover on navigation button: hover:bg-slate-200 dark:hover:bg-slate-700
text and icons colors : text-slate-900 dark:text-slate-300

px-6 py-4
 */

@theme {
  /* default */
  --font-sans: "Quicksand", sans-serif;

  --breakpoint-smallest: 300px;
  --breakpoint-sm: 325px;
  --breakpoint-medium: 650px;
  --breakpoint-md: 768px;
  --breakpoint-middle: 850px;
  --breakpoint-maxmid: 900px;
  --breakpoint-lg: 1024px;

  /*
  --breakpoint-sm: 40rem;
  --breakpoint-md: 48rem;
  --breakpoint-lg: 64rem;
  --breakpoint-xl: 80rem;
  --breakpoint-2xl: 96rem;
  */
}

@layer components {
  /* General */
  .transitioning {
    @apply transform transition-transform duration-300 ease-in-out;
  }

  .transitioningColors {
    @apply transition-colors duration-300;
  }

  .defaultColor {
    @apply bg-white transition-colors duration-300 dark:bg-slate-900;
  }

  /* medium:py-2 */
  .input {
    @apply rounded-sm border border-stone-300 px-1.5 py-1.5 text-sm text-black transition-all duration-300 placeholder:text-xs hover:border-slate-400 focus:ring-2 focus:ring-slate-400 focus:outline-hidden;
  }

  .button {
    @apply medium:text-[0.74rem] cursor-pointer rounded-sm border text-[0.7rem] transition-colors duration-300;
  }

  /* I will be changing the primary button */
  .primaryButton {
    @apply cursor-pointer rounded-sm bg-slate-500 px-4 py-2 text-[0.8rem] text-white transition-colors duration-300 hover:bg-slate-600 focus:ring-slate-300;
  }

  .navButton {
    @apply medium:justify-center mb-2 flex w-full cursor-pointer items-center gap-2.5 rounded-sm px-2 py-1.5 text-center text-sm font-semibold transition-colors duration-500 hover:rounded-sm;
  }

  .scroll-container {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .scroll-container::-webkit-scrollbar {
    display: none;
  }

  .progress {
    width: 100%;
    height: 3px;
    background: linear-gradient(#000 0 0) 0/0% no-repeat #ddd;
    animation: l1 2s infinite linear;
  }

  @keyframes l1 {
    100% {
      background-size: 100%;
    }
  }

  .spinner {
    aspect-ratio: 1;
    border-radius: 50%;
    /* background: #555;  */
    --_m:
      conic-gradient(#0000 10%, #000), linear-gradient(#000 0 0) content-box;
    -webkit-mask: var(--_m);
    mask: var(--_m);
    -webkit-mask-composite: source-out;
    mask-composite: subtract;
    animation: l3 1s infinite linear;
  }

  @keyframes l3 {
    to {
      transform: rotate(1turn);
    }
  }
}

/*
Will use this in the flashcard section to switch between normal created card or ai generated

className="rounded-sm border border-slate-200 bg-white p-1 shadow-sm dark:border-slate-700 dark:bg-slate-800"
*/

/* 
 **Absolutely!** I'll definitely help you integrate Firebase to make everything realtime and user-specific. This is actually the exciting part where we bring all the UI components to life with real data!

 ## **ðŸ”¥ Firebase Integration Plan:**

 ### **1. Database Structure I'll Help You Build:**

 ```javascript
 // Firestore Collections Structure
 users/{userId} - User profile data
 flashcards/{cardId} - Individual flashcard data
 decks/{deckId} - Flashcard collections
 schedules/{scheduleId} - Study sessions
 notes/{noteId} - User notes
 progress/{progressId} - Learning analytics
 ```

 ### **2. Real-time Features We'll Implement:**

 **Authentication & User Data:**

 - âœ… User signup/login (already done)
 - ðŸ”„ User profile management
 - ðŸ”„ Session persistence


 **Dashboard:**

 - ðŸ”„ Real-time stats (cards reviewed, time spent, streaks)
 - ðŸ”„ Live progress tracking
 - ðŸ”„ Dynamic due card calculations


 **Flashcards:**

 - ðŸ”„ CRUD operations (Create, Read, Update, Delete)
 - ðŸ”„ Spaced repetition algorithm
 - ðŸ”„ Performance tracking per card


 **Notes:**

 - âœ… Create notes (partially done)
 - ðŸ”„ Edit/delete notes
 - ðŸ”„ Real-time sync across devices


 **Schedules:**

 - ðŸ”„ Smart scheduling based on spaced repetition
 - ðŸ”„ Session completion tracking
 - ðŸ”„ Automatic rescheduling of missed sessions


 ### **3. Real-time Capabilities:**

 **Live Updates:**

 - Changes sync instantly across all devices
 - Real-time collaboration (if multiple users)
 - Live progress updates during study sessions


 **Smart Features:**

 - Automatic due date calculations
 - Performance-based scheduling
 - Streak tracking and notifications


 ### **4. What I'll Help You With:**

 **Firebase Setup:**

 - Firestore database rules and structure
 - Real-time listeners for live updates
 - Optimistic updates for better UX


 **Data Management:**

 - Custom hooks for Firebase operations
 - Caching strategies for offline support
 - Error handling and loading states


 **Advanced Features:**

 - Spaced repetition algorithms
 - Analytics and progress tracking
 - Smart scheduling recommendations


 ## **ðŸš€ Implementation Approach:**

 1. **Start with Core Data** - User profiles, flashcards, notes
 2. **Add Real-time Listeners** - Live updates for all components
 3. **Implement Smart Features** - Spaced repetition, analytics
 4. **Optimize Performance** - Caching, pagination, offline support
 5. **Add Advanced Features** - Notifications, sharing, export


 ## **ðŸ“± The End Result:**

 Your app will have:

 - **Real-time sync** across all devices
 - **Smart scheduling** that adapts to user performance
 - **Live progress tracking** with detailed analytics
 - **Offline support** for studying anywhere
 - **Personalized experience** based on learning patterns


 **When you're ready to start the Firebase integration, just let me know!** We can tackle it section by section:

 1. **Database structure setup**
 2. **Convert existing components to use real data**
 3. **Add real-time listeners**
 4. **Implement advanced features**


 I'm excited to help you build this into a fully functional, intelligent flashcard app! ðŸŽ¯
 */
